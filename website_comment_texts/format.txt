https://eu.swi-prolog.org/pldoc/doc_for?object=format/2

## Print hex codes

0-padded 4-nibbles:

```
?- Code=6464, format(atom(T),"0x~|~`0t~16r~4+",[Code]).
Code = 6464,
T = '0x1940'.
```

## Cheatsheet

A cheatsheet for format/2 can be grabbed here:

   - [PDF](https://github.com/dtonhofer/prolog_notes/tree/master/swipl_notes/about_output_formatting/format_2_cheatsheet/format_2_cheatsheet.pdf)
   - [ODS](https://github.com/dtonhofer/prolog_notes/tree/master/swipl_notes/about_output_formatting/format_2_cheatsheet/format_2_cheatsheet.ods)
   - [PNG](https://github.com/dtonhofer/prolog_notes/tree/master/swipl_notes/about_output_formatting/format_2_cheatsheet/format_2_cheatsheet.png)

## Maybe missing

An option which takes two elements from the _Arguments_ list, the format string and the value.

Supposing we use `&`, one could then do:

```
?- format("This is a float: ~&~n",[f,0.12]).
This is a float: 0.120000
true.

?- format("This is a float: ~&~n",[g,0.12]).
This is a float: 0.12
true.
```

etc. Seems reasonable for a dynamically typed language.

## Note the quoting

String, with or without spaces, formatted using `~q` or `~s`:

```
?- format("~s",["a b"]).
a b
true.

?- format("~q",["a b"]).
"a b"
true.

?- format("~s",["ab"]).
ab
true.

?- format("~q",["ab"]).
"ab"
true.
```

Similar to atom:


```
?- format("~a",['a b']).
a b
true.

?- format("~q",['a b']).
'a b'
true.

?- format("~a",[ab]).
ab
true.

?- format("~q",[ab]).
ab
true.
```

## Where exactly does the output go?

I guess it goes to whatever is "currently" denoted by `current_ouput`.
That would generally be the same as `user_output`, i.e. _stdout_.

See [Predefined stream aliases](https://eu.swi-prolog.org/pldoc/man?section=streamalias)

To direct the output elsewhere, you will have to change the `current_output` with with_output_to/2 or use format/3. The latter is more practical.

## More on various printing predicates

For those looking for the correct predicate to use:

   - [Relevant predicates for generating output in Prolog](https://github.com/dtonhofer/prolog_notes/blob/master/swipl_notes/about_output_formatting/README.md) - Notes (this is getting large)
   - [Relevant predicates for generating output in Prolog](https://github.com/dtonhofer/prolog_notes/blob/master/swipl_notes/about_output_formatting/output_formatting_pics/tldr.svg) - SVG overview diagram

## Check the format string

This pack provides (I haven't tested it yet):

https://www.swi-prolog.org/pack/list?p=format_spec

## From the toolbox: Defensive programming around format calls

format/2 is **precise in the arguments it expects** and will throw if there are too many or too few arguments.

If you want to make sure a call to format/2 won't generate further exceptions in situations where you are already handling an exception for example here:

[`safe_format.pl`](https://github.com/dtonhofer/prolog_code/blob/main/unpacked/onepointfour_basics/safe_format.pl)

```
?- safe_format("Hello ~d",[7889],Result).
Result = "Hello 7889".

?- safe_format("Hello ~d",[hello],Result).
Result = "Exception in format/3 with format string <Hello ~d> and args <hello>".

?- safe_format("Open the ~s.",["pod bay doors","HAL"],Result).
Result = "Exception in format/3 with format string <Open the ~s.> and args <\"pod bay doors\">,<\"HAL\">".
```

Actually, there is a non-exported `'$messages':safe_format/3` in file `messages.pl` already. Good stuff:

```
safe_format(S, Fmt, Args) :-
    E = error(_,_),                     % avoid repeating error(X,Y)
    catch(format(S,Fmt,Args), E,
          format_failed(S,Fmt,Args,E)).

format_failed(S, _Fmt, _Args, E) :-
    E = error(io_error(_,S),_),         % if it's I/O error, rethrow!
    !,
    throw(E).
format_failed(S, Fmt, Args, error(E,_)) :-
    format(S, '~N    [[ EXCEPTION while printing message ~q~n\c
                        ~7|with arguments ~W:~n\c
                        ~7|raised: ~W~n~4|]]~n',
           [ Fmt,
             Args, [quoted(true), max_depth(10)],  % emitted with write_term/2
             E, [quoted(true), max_depth(10)]      % emitted with write_term/2
           ]).
```

## Justify text left, right or centered

You can use the format/2 tabstop markers directly and flexibly.

For example, a program that builds a format string to set tabstops and print "Hello" into that space, center-justified (with + used as whitespace on the left, * used as whitespace on the right):

```
several_strings :-
   Ch1=0'+,  % a codepoint
   Ch2=0'*,  % a codepoint
   bagof(X,between(0,20,X),Positions), % a list 0..20
   maplist(
       {Ch1,Ch2}/[P,F]>>
          atomics_to_string(["~|","~",Ch1,"t","~s","~",Ch2,"t","~",P,"+"],F),
       Positions,
       FormatStrings),
   maplist(
       [F]>>
         (format("The format string is ~q, The formatted string is ",[F]),
          format(F,["Hello"]),
          format("~n")),
       FormatStrings).
```

Sample output:

```
The format string is "~|~43t~s~42t~5+", The formatted string is Hello
The format string is "~|~43t~s~42t~6+", The formatted string is Hello*
The format string is "~|~43t~s~42t~7+", The formatted string is +Hello*
The format string is "~|~43t~s~42t~8+", The formatted string is +Hello**
The format string is "~|~43t~s~42t~9+", The formatted string is ++Hello**
The format string is "~|~43t~s~42t~10+", The formatted string is ++Hello***
```
   
Note that the tabstop position markers are all relative instead of absolute. This is needed because the absolute tabpositions are positions in the output line, not the string generated by "format" (so format seems to consult the status of the current line in `current_output`). As the intro "The format string ..." is of variable length, absolute positions relative to the line would not work and absolute positions relative to the string would be a swamped by a sufficently long intro.

Note that tabstop position 0 is after character 0, counted from 0 (as expected):

```
?- format("~42t~0|<\n"). % tabstop at 0, there are no characters to fill in with ~t
<

?- format("~42t~1|<\n"). % tabstop at 1, there is 1 characters to fill in with ~t
*<

?- format("~42t~2|<\n"). % tabstop at 2, there are 2 characters to fill in with ~t
**<
```

## From the toolbox: Justify text left, right or centered

I did my own code for "string justification" as programming exercise, this becomes complex quickly:

[README_stringy_justify.md](https://github.com/dtonhofer/prolog_code/blob/main/unpacked/onepointfour_basics/doc/README_stringy_justify.md)

```
?- justify_how(left,10,"hello",Result,string).
Result = "hello     ".
```

etc.

## Playing with floats

This little example prints a float, reads it back and compares:

Note that float are [IEEE 754 64-bit floats](https://en.wikipedia.org/wiki/IEEE_754), which have 53 binary digits, thus 15.95 decimal digits of precision between 1.0 and 2.0.

At a precision of 16 decimal digits, the difference to what is read back in is 0 (or rather, it underflows to 0?). 

Adding more precision makes the printer hallucinate meaningless additional digits of precision. Fun!

==
several_floats :-
   V is sqrt(2),
   assertion(float(V)),
   bagof(X,between(0,20,X),Positions), % a list 0..20
   maplist({V}/[P,F]>>atomics_to_string(["~",P,"e"],F),Positions,FormatStrings),
   maplist(
      {V}/[F]>>(
         format("The format string is ~q",[F]),
         format(string(FormyV),F,[V]),
         format(", The formatted string is ~s",[FormyV]),
         string_codes(FormyV,Cs),
         phrase(float(ReadV),Cs), 
         assertion(float(ReadV)),
         Delta is V-ReadV,
         format(", The difference to the read-back value is ~e",[Delta]),
         format("~n")),
      FormatStrings).
==      

==
The format string is "~13e", The formatted string is 1.4142135623731e+00, The difference to the read-back value is -4.884981e-15
The format string is "~14e", The formatted string is 1.41421356237310e+00, The difference to the read-back value is -4.884981e-15
The format string is "~15e", The formatted string is 1.414213562373095e+00, The difference to the read-back value is 2.220446e-16
The format string is "~16e", The formatted string is 1.4142135623730951e+00, The difference to the read-back value is 0.000000e+00
The format string is "~17e", The formatted string is 1.41421356237309515e+00, The difference to the read-back value is 0.000000e+00
The format string is "~18e", The formatted string is 1.414213562373095145e+00, The difference to the read-back value is 0.000000e+00
==

## Inline function call 

SWI-Prolog has [dicts](https://eu.swi-prolog.org/pldoc/man?section=bidicts). Predicates can be associated to those, and they behave like function calls. This gives us function calls beyond the arithmetic evaluation of is/2. In particular, for strings you can do things like this:

Define a module called =string= to associate functions to dicts with tag =string= (there is a problem in that modules are not hierarchical so you may end up with a name clash in the unique global module space, but, let's disregard this for now):

==
:- module(string,[]).

% This is a predicate format/3 written as a function format/2 (maybe there
% needs to be a new descriptor syntax: format///2 ?) taking a dict tagged as
% "string" and two arguments which evaluates to the value of variable Text.

S.format(Msg,Args) := Text :- with_output_to(string(Text),format(Msg,Args)).
==

Once the above module has been loaded, you can do things like these, which 
behave like a Java "static" method call (you can move args into the dict
too of course):

==
?- X=string{}.format("Hello, ~q\n",["World"]).
X = "Hello, \"World\"\n".
==

==
?- debug(foo),debug(foo,string{}.format("Hello, ~q\n",["World"]),[]).
% Hello, "World"
==

## More tricks

Generates a string of 2 spaces in `Spaces`: 

```
format(string(Spaces), '~t~*|', [2]).
```

   - because `~t` soaks up positions between the 0th and the 1st tab stop and generates space characters
   - `~*|` sets the next tab stop at the position given by the value in the arglist, i.e. at position 2.

## Related: Tabular data

I always wanted to print tabular data in Prolog. Here is a dirt simple way of doing it (still has rough edges, prerelesase):

   - [tablify.pl](https://github.com/dtonhofer/prolog_notes/blob/master/code/heavycarbon/strings/tablify.pl)

Prints things like these based on a table description made with a dict:

```
?- test_tablify(X).
+------+--------+------------+--------------+------------+------+
| Name | Prior  | Local cost | Overall cost |   State    | Hops |
+------+--------+------------+--------------+------------+------+
|  a   |        |        100 |      1000000 | visit_next |  100 |
|  b   | calpha |         10 |          100 |   probed   |  100 |
+------+--------+------------+--------------+------------+------+
```

There are packs offering this functionality:

   - https://eu.swi-prolog.org/pack/list?p=print_table
   - https://eu.swi-prolog.org/pack/list?p=clitable

## How to prettyprint a dict

   - [README_dict_pp.md](https://github.com/dtonhofer/prolog_code/blob/main/unpacked/onepointfour_basics/doc/README_dict_pp.md)

For example:

```
?- dict_pp(various{w: 0.25984759, ww: 1.4587598, www: 643764856, wwww: 400},
           _{pad_left:5,pad_right:4,pad:true}).
         various         
     w    : 0.259848     
     ww   : 1.458760     
     www  : 643764856    
     wwww : 400        
true.

?- dict_pp(various{w: 0.25984759, ww: 1.4587598, www: 643764856, wwww: 400},
           _{pad:true,pad_left:2,pad_top:1,pad_bottom:1,pad_right:2,
             border:true,justify_tag:left,justify_tag_full:false}).
+--------------------+
|  various           |
+--------------------+
|                    |
|  w    : 0.259848   |
|  ww   : 1.458760   |
|  www  : 643764856  |
|  wwww : 400        |
|                    |
+--------------------+
true.

?- dict_pp(alpha{w1: 10, w2: 200, w3: 3000,
                   w4: bravo{w1: 10, w2: 20,
                      w3: charlie{ a: 12, b: 13}}},
           _{border:true,tag:false}).
+--------------------+
|w1 : 10             |
|w2 : 200            |
|w3 : 3000           |
|w4 : +-------------+|
|     |w1 : 10      ||
|     |w2 : 20      ||
|     |w3 : +------+||
|     |     |a : 12|||
|     |     |b : 13|||
|     |     +------+||
|     +-------------+|
+--------------------+
true.
```

